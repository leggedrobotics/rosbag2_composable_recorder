cmake_minimum_required(VERSION 3.16)
project(rosbag2_composable_recorder)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic -Werror)
endif()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RelWithDebInfo)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_cmake_auto REQUIRED)
find_package(rosidl_default_generators REQUIRED)
find_package(rosidl_default_runtime REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_components REQUIRED)
find_package(std_srvs REQUIRED)
find_package(rosbag2_transport REQUIRED)

rosidl_generate_interfaces(${PROJECT_NAME}
  "srv/StartRecording.srv"
  DEPENDENCIES builtin_interfaces std_msgs
)

ament_export_dependencies(rosidl_default_runtime)

rosidl_get_typesupport_target(cpp_typesupport_target "${PROJECT_NAME}" "rosidl_typesupport_cpp")


if(${rosbag2_transport_VERSION} VERSION_GREATER_EQUAL 0.25.0)
  add_definitions(-DUSE_ALL_TOPICS)
endif()

if(${rosbag2_transport_VERSION} VERSION_GREATER_EQUAL 0.22.6)
  add_definitions(-DUSE_GET_STORAGE_OPTIONS)
  add_definitions(-DUSE_GET_RECORD_OPTIONS)
  add_definitions(-DUSE_STOP_DISCOVERY)
endif()

ament_auto_find_build_dependencies(REQUIRED)

#
# --------- recorder (composable component and node) -------------

ament_auto_add_library(composable_recorder SHARED
  src/composable_recorder.cpp)

target_include_directories(composable_recorder PRIVATE include)
target_link_libraries(composable_recorder "${cpp_typesupport_target}")

rclcpp_components_register_nodes(composable_recorder "rosbag2_composable_recorder::ComposableRecorder")


ament_auto_add_executable(composable_recorder_node
  src/composable_recorder_node.cpp)

install(TARGETS
  composable_recorder
  DESTINATION lib)

install(TARGETS
  composable_recorder_node
  DESTINATION lib/${PROJECT_NAME}/)

install(PROGRAMS
  src/start_recording.py
  DESTINATION lib/${PROJECT_NAME}/)

install(DIRECTORY
  launch
  DESTINATION share/${PROJECT_NAME}/
  FILES_MATCHING PATTERN "*.py")

if(BUILD_TESTING)
  find_package(ament_cmake REQUIRED)
  find_package(ament_cmake_cppcheck REQUIRED)
  find_package(ament_cmake_cpplint REQUIRED)
  find_package(ament_cmake_lint_cmake REQUIRED)
  find_package(ament_cmake_xmllint REQUIRED)

  ament_cppcheck(LANGUAGE c++)
  ament_cpplint(FILTERS "-build/include,-runtime/indentation_namespace")
  ament_lint_cmake()
  ament_xmllint()
endif()

ament_package()